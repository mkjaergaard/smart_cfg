"""autogenerated by genmsg_py from ComponentModelInfoRequest.msg. Do not edit."""
import roslib.message
import struct

import smart_cfg_server.msg

class ComponentModelInfoRequest(roslib.message.Message):
  _md5sum = "35835d09ab31ab01f8b30f36891a6270"
  _type = "smart_cfg_server/ComponentModelInfoRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool subscribe
ComponentModelID component_id
================================================================================
MSG: smart_cfg_server/ComponentModelID
string name
"""
  __slots__ = ['subscribe','component_id']
  _slot_types = ['bool','smart_cfg_server/ComponentModelID']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       subscribe,component_id
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(ComponentModelInfoRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.subscribe is None:
        self.subscribe = False
      if self.component_id is None:
        self.component_id = smart_cfg_server.msg.ComponentModelID()
    else:
      self.subscribe = False
      self.component_id = smart_cfg_server.msg.ComponentModelID()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      buff.write(_struct_B.pack(self.subscribe))
      _x = self.component_id.name
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      if self.component_id is None:
        self.component_id = smart_cfg_server.msg.ComponentModelID()
      end = 0
      start = end
      end += 1
      (self.subscribe,) = _struct_B.unpack(str[start:end])
      self.subscribe = bool(self.subscribe)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.component_id.name = str[start:end]
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      buff.write(_struct_B.pack(self.subscribe))
      _x = self.component_id.name
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      if self.component_id is None:
        self.component_id = smart_cfg_server.msg.ComponentModelID()
      end = 0
      start = end
      end += 1
      (self.subscribe,) = _struct_B.unpack(str[start:end])
      self.subscribe = bool(self.subscribe)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.component_id.name = str[start:end]
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_B = struct.Struct("<B")
