"""autogenerated by genmsg_py from ParameterIDAndValueEx.msg. Do not edit."""
import roslib.message
import struct

import smart_cfg_server.msg

class ParameterIDAndValueEx(roslib.message.Message):
  _md5sum = "fd6fd9e36d5917eba1b71dcc0540236c"
  _type = "smart_cfg_server/ParameterIDAndValueEx"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """ParameterID id
ParameterValue current_value
bool change_request
ParameterValue new_value
================================================================================
MSG: smart_cfg_server/ParameterID
string name
================================================================================
MSG: smart_cfg_server/ParameterValue
string type
string encoded_value
"""
  __slots__ = ['id','current_value','change_request','new_value']
  _slot_types = ['smart_cfg_server/ParameterID','smart_cfg_server/ParameterValue','bool','smart_cfg_server/ParameterValue']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       id,current_value,change_request,new_value
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(ParameterIDAndValueEx, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = smart_cfg_server.msg.ParameterID()
      if self.current_value is None:
        self.current_value = smart_cfg_server.msg.ParameterValue()
      if self.change_request is None:
        self.change_request = False
      if self.new_value is None:
        self.new_value = smart_cfg_server.msg.ParameterValue()
    else:
      self.id = smart_cfg_server.msg.ParameterID()
      self.current_value = smart_cfg_server.msg.ParameterValue()
      self.change_request = False
      self.new_value = smart_cfg_server.msg.ParameterValue()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self.id.name
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.current_value.type
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.current_value.encoded_value
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.change_request))
      _x = self.new_value.type
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.new_value.encoded_value
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      if self.id is None:
        self.id = smart_cfg_server.msg.ParameterID()
      if self.current_value is None:
        self.current_value = smart_cfg_server.msg.ParameterValue()
      if self.new_value is None:
        self.new_value = smart_cfg_server.msg.ParameterValue()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.id.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.current_value.type = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.current_value.encoded_value = str[start:end]
      start = end
      end += 1
      (self.change_request,) = _struct_B.unpack(str[start:end])
      self.change_request = bool(self.change_request)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.new_value.type = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.new_value.encoded_value = str[start:end]
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self.id.name
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.current_value.type
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.current_value.encoded_value
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.change_request))
      _x = self.new_value.type
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.new_value.encoded_value
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      if self.id is None:
        self.id = smart_cfg_server.msg.ParameterID()
      if self.current_value is None:
        self.current_value = smart_cfg_server.msg.ParameterValue()
      if self.new_value is None:
        self.new_value = smart_cfg_server.msg.ParameterValue()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.id.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.current_value.type = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.current_value.encoded_value = str[start:end]
      start = end
      end += 1
      (self.change_request,) = _struct_B.unpack(str[start:end])
      self.change_request = bool(self.change_request)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.new_value.type = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.new_value.encoded_value = str[start:end]
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_B = struct.Struct("<B")
